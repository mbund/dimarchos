// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type externalNatKey struct {
	SrcIp   uint32
	DstIp   uint32
	SrcPort uint16
	DstPort uint16
	Proto   uint8
	_       [3]byte
}

type externalNatValue struct {
	NewSrcIp   uint32
	NewSrcPort uint16
	_          [2]byte
}

// loadExternal returns the embedded CollectionSpec for external.
func loadExternal() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExternalBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load external: %w", err)
	}

	return spec, err
}

// loadExternalObjects loads external and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*externalObjects
//	*externalPrograms
//	*externalMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadExternalObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadExternal()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// externalSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type externalSpecs struct {
	externalProgramSpecs
	externalMapSpecs
	externalVariableSpecs
}

// externalProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type externalProgramSpecs struct {
	TcxEgress  *ebpf.ProgramSpec `ebpf:"tcx_egress"`
	TcxIngress *ebpf.ProgramSpec `ebpf:"tcx_ingress"`
}

// externalMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type externalMapSpecs struct {
	NatTable *ebpf.MapSpec `ebpf:"nat_table"`
}

// externalVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type externalVariableSpecs struct {
	NetkitIfindex *ebpf.VariableSpec `ebpf:"netkit_ifindex"`
}

// externalObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadExternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type externalObjects struct {
	externalPrograms
	externalMaps
	externalVariables
}

func (o *externalObjects) Close() error {
	return _ExternalClose(
		&o.externalPrograms,
		&o.externalMaps,
	)
}

// externalMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadExternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type externalMaps struct {
	NatTable *ebpf.Map `ebpf:"nat_table"`
}

func (m *externalMaps) Close() error {
	return _ExternalClose(
		m.NatTable,
	)
}

// externalVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadExternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type externalVariables struct {
	NetkitIfindex *ebpf.Variable `ebpf:"netkit_ifindex"`
}

// externalPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadExternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type externalPrograms struct {
	TcxEgress  *ebpf.Program `ebpf:"tcx_egress"`
	TcxIngress *ebpf.Program `ebpf:"tcx_ingress"`
}

func (p *externalPrograms) Close() error {
	return _ExternalClose(
		p.TcxEgress,
		p.TcxIngress,
	)
}

func _ExternalClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed external_bpfeb.o
var _ExternalBytes []byte
