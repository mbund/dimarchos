// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type containerQnameKey struct{ Qname [256]uint8 }

// loadContainer returns the embedded CollectionSpec for container.
func loadContainer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ContainerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load container: %w", err)
	}

	return spec, err
}

// loadContainerObjects loads container and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*containerObjects
//	*containerPrograms
//	*containerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadContainerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadContainer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// containerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type containerSpecs struct {
	containerProgramSpecs
	containerMapSpecs
	containerVariableSpecs
}

// containerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type containerProgramSpecs struct {
	NetkitPeer    *ebpf.ProgramSpec `ebpf:"netkit_peer"`
	NetkitPrimary *ebpf.ProgramSpec `ebpf:"netkit_primary"`
}

// containerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type containerMapSpecs struct {
	QnameMap *ebpf.MapSpec `ebpf:"qname_map"`
}

// containerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type containerVariableSpecs struct {
	EgressPktCount  *ebpf.VariableSpec `ebpf:"egress_pkt_count"`
	IngressPktCount *ebpf.VariableSpec `ebpf:"ingress_pkt_count"`
}

// containerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadContainerObjects or ebpf.CollectionSpec.LoadAndAssign.
type containerObjects struct {
	containerPrograms
	containerMaps
	containerVariables
}

func (o *containerObjects) Close() error {
	return _ContainerClose(
		&o.containerPrograms,
		&o.containerMaps,
	)
}

// containerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadContainerObjects or ebpf.CollectionSpec.LoadAndAssign.
type containerMaps struct {
	QnameMap *ebpf.Map `ebpf:"qname_map"`
}

func (m *containerMaps) Close() error {
	return _ContainerClose(
		m.QnameMap,
	)
}

// containerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadContainerObjects or ebpf.CollectionSpec.LoadAndAssign.
type containerVariables struct {
	EgressPktCount  *ebpf.Variable `ebpf:"egress_pkt_count"`
	IngressPktCount *ebpf.Variable `ebpf:"ingress_pkt_count"`
}

// containerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadContainerObjects or ebpf.CollectionSpec.LoadAndAssign.
type containerPrograms struct {
	NetkitPeer    *ebpf.Program `ebpf:"netkit_peer"`
	NetkitPrimary *ebpf.Program `ebpf:"netkit_primary"`
}

func (p *containerPrograms) Close() error {
	return _ContainerClose(
		p.NetkitPeer,
		p.NetkitPrimary,
	)
}

func _ContainerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed container_bpfeb.o
var _ContainerBytes []byte
