// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadSockets returns the embedded CollectionSpec for sockets.
func loadSockets() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SocketsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sockets: %w", err)
	}

	return spec, err
}

// loadSocketsObjects loads sockets and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*socketsObjects
//	*socketsPrograms
//	*socketsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSocketsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSockets()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// socketsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketsSpecs struct {
	socketsProgramSpecs
	socketsMapSpecs
	socketsVariableSpecs
}

// socketsProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketsProgramSpecs struct {
	SockopsLogger *ebpf.ProgramSpec `ebpf:"sockops_logger"`
}

// socketsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketsMapSpecs struct {
}

// socketsVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketsVariableSpecs struct {
}

// socketsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketsObjects struct {
	socketsPrograms
	socketsMaps
	socketsVariables
}

func (o *socketsObjects) Close() error {
	return _SocketsClose(
		&o.socketsPrograms,
		&o.socketsMaps,
	)
}

// socketsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketsMaps struct {
}

func (m *socketsMaps) Close() error {
	return _SocketsClose()
}

// socketsVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketsVariables struct {
}

// socketsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketsPrograms struct {
	SockopsLogger *ebpf.Program `ebpf:"sockops_logger"`
}

func (p *socketsPrograms) Close() error {
	return _SocketsClose(
		p.SockopsLogger,
	)
}

func _SocketsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sockets_bpfeb.o
var _SocketsBytes []byte
