// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package objs

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type SocketsSockKey struct {
	RemoteIp4  uint32
	LocalIp4   uint32
	RemotePort uint32
	LocalPort  uint32
	Family     uint32
}

// LoadSockets returns the embedded CollectionSpec for Sockets.
func LoadSockets() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SocketsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Sockets: %w", err)
	}

	return spec, err
}

// LoadSocketsObjects loads Sockets and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*SocketsObjects
//	*SocketsPrograms
//	*SocketsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadSocketsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadSockets()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// SocketsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SocketsSpecs struct {
	SocketsProgramSpecs
	SocketsMapSpecs
	SocketsVariableSpecs
}

// SocketsProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SocketsProgramSpecs struct {
	ProgMsgVerdict *ebpf.ProgramSpec `ebpf:"prog_msg_verdict"`
	SockopsLogger  *ebpf.ProgramSpec `ebpf:"sockops_logger"`
}

// SocketsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SocketsMapSpecs struct {
	Sockhash *ebpf.MapSpec `ebpf:"sockhash"`
}

// SocketsVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SocketsVariableSpecs struct {
}

// SocketsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type SocketsObjects struct {
	SocketsPrograms
	SocketsMaps
	SocketsVariables
}

func (o *SocketsObjects) Close() error {
	return _SocketsClose(
		&o.SocketsPrograms,
		&o.SocketsMaps,
	)
}

// SocketsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type SocketsMaps struct {
	Sockhash *ebpf.Map `ebpf:"sockhash"`
}

func (m *SocketsMaps) Close() error {
	return _SocketsClose(
		m.Sockhash,
	)
}

// SocketsVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type SocketsVariables struct {
}

// SocketsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadSocketsObjects or ebpf.CollectionSpec.LoadAndAssign.
type SocketsPrograms struct {
	ProgMsgVerdict *ebpf.Program `ebpf:"prog_msg_verdict"`
	SockopsLogger  *ebpf.Program `ebpf:"sockops_logger"`
}

func (p *SocketsPrograms) Close() error {
	return _SocketsClose(
		p.ProgMsgVerdict,
		p.SockopsLogger,
	)
}

func _SocketsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sockets_bpfel.o
var _SocketsBytes []byte
