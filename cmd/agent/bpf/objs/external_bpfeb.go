// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package objs

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ExternalNatKey struct {
	SrcIp   uint32
	DstIp   uint32
	SrcPort uint16
	DstPort uint16
	Proto   uint8
	_       [3]byte
}

type ExternalNatValue struct {
	NewSrcIp   uint32
	NewSrcPort uint16
	_          [2]byte
}

// LoadExternal returns the embedded CollectionSpec for External.
func LoadExternal() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExternalBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load External: %w", err)
	}

	return spec, err
}

// LoadExternalObjects loads External and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ExternalObjects
//	*ExternalPrograms
//	*ExternalMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadExternalObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadExternal()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ExternalSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExternalSpecs struct {
	ExternalProgramSpecs
	ExternalMapSpecs
	ExternalVariableSpecs
}

// ExternalProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExternalProgramSpecs struct {
	TcxEgress  *ebpf.ProgramSpec `ebpf:"tcx_egress"`
	TcxIngress *ebpf.ProgramSpec `ebpf:"tcx_ingress"`
}

// ExternalMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExternalMapSpecs struct {
	NatTable *ebpf.MapSpec `ebpf:"nat_table"`
}

// ExternalVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExternalVariableSpecs struct {
	NetkitIfindex *ebpf.VariableSpec `ebpf:"netkit_ifindex"`
}

// ExternalObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadExternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExternalObjects struct {
	ExternalPrograms
	ExternalMaps
	ExternalVariables
}

func (o *ExternalObjects) Close() error {
	return _ExternalClose(
		&o.ExternalPrograms,
		&o.ExternalMaps,
	)
}

// ExternalMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadExternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExternalMaps struct {
	NatTable *ebpf.Map `ebpf:"nat_table"`
}

func (m *ExternalMaps) Close() error {
	return _ExternalClose(
		m.NatTable,
	)
}

// ExternalVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadExternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExternalVariables struct {
	NetkitIfindex *ebpf.Variable `ebpf:"netkit_ifindex"`
}

// ExternalPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadExternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExternalPrograms struct {
	TcxEgress  *ebpf.Program `ebpf:"tcx_egress"`
	TcxIngress *ebpf.Program `ebpf:"tcx_ingress"`
}

func (p *ExternalPrograms) Close() error {
	return _ExternalClose(
		p.TcxEgress,
		p.TcxIngress,
	)
}

func _ExternalClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed external_bpfeb.o
var _ExternalBytes []byte
