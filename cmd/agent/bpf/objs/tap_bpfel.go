// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package objs

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadTap returns the embedded CollectionSpec for Tap.
func LoadTap() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TapBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Tap: %w", err)
	}

	return spec, err
}

// LoadTapObjects loads Tap and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*TapObjects
//	*TapPrograms
//	*TapMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTapObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTap()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TapSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TapSpecs struct {
	TapProgramSpecs
	TapMapSpecs
	TapVariableSpecs
}

// TapProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TapProgramSpecs struct {
	TcxEgress  *ebpf.ProgramSpec `ebpf:"tcx_egress"`
	TcxIngress *ebpf.ProgramSpec `ebpf:"tcx_ingress"`
	XdpProg    *ebpf.ProgramSpec `ebpf:"xdp_prog"`
}

// TapMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TapMapSpecs struct {
}

// TapVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TapVariableSpecs struct {
}

// TapObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTapObjects or ebpf.CollectionSpec.LoadAndAssign.
type TapObjects struct {
	TapPrograms
	TapMaps
	TapVariables
}

func (o *TapObjects) Close() error {
	return _TapClose(
		&o.TapPrograms,
		&o.TapMaps,
	)
}

// TapMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTapObjects or ebpf.CollectionSpec.LoadAndAssign.
type TapMaps struct {
}

func (m *TapMaps) Close() error {
	return _TapClose()
}

// TapVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadTapObjects or ebpf.CollectionSpec.LoadAndAssign.
type TapVariables struct {
}

// TapPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTapObjects or ebpf.CollectionSpec.LoadAndAssign.
type TapPrograms struct {
	TcxEgress  *ebpf.Program `ebpf:"tcx_egress"`
	TcxIngress *ebpf.Program `ebpf:"tcx_ingress"`
	XdpProg    *ebpf.Program `ebpf:"xdp_prog"`
}

func (p *TapPrograms) Close() error {
	return _TapClose(
		p.TcxEgress,
		p.TcxIngress,
		p.XdpProg,
	)
}

func _TapClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tap_bpfel.o
var _TapBytes []byte
